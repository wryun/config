# this file basically makes 'es' look more like a modern bash prompt
# (in terms of following symlinks, colours, cd - (+ enhancements))
#

# So we don't check custom environment into git...
if {test -e ~/.local_env} {
  . ~/.local_env
}

# Put this in .local_env if running some weird non-systemd setup (i.e. Void).
# XDG_RUNTIME_DIR = `{mktemp -d -t xdg_runtime_dir.$USER.XXXX}

# Settings
DENO_INSTALL = ~/.deno
GOPATH = ~/go
PYENV_ROOT = ~/.pyenv
N_PREFIX = ~/local
COMPOSE_DOCKER_CLI_BUILD = 1
DOCKER_BUILDKIT = 1
GID = `{id -g}
UID = `{id -u}

# disabled for screen...
#noexport = $noexport history

host = `hostname
path = ( ~/.local/bin ~/.bun/bin ~/.pyenv/bin ~/.pyenv/shims ~/.cargo/bin $DENO_INSTALL^/bin $GOPATH^/bin $path )

EDITOR = `{which vi}
PAGER = `{which less}

fn dcr {
  docker-compose run --no-deps --rm $*
}

# Frustratingly, BSD test doesn't support -l
fn strlen {
    if {~ $1 ()} {
        return 0
    } {
        return `{awk 'BEGIN { print length("'^$1^'") }'}
    }
}

# symlink cd (and pwd)
fn pwd {
    if {~ $#cwd 0} {
        noexport = $noexport cwd
        cwd = `` \n /bin/pwd
    }
    echo $cwd
}
let (cd = $fn-cd) fn cd dir {
    if {~ $#cwd 0} {
        noexport = $noexport cwd
    }
    if {~ $#dir 0} {
        $cd
        cwd = ~
    } {
        let (current = <={
            if {~ $dir /*} {
                result
            } {
                if {~ $#cwd 0} {
                    cwd = `` \n /bin/pwd
                }
                %split / $cwd
            }
        }) {
            for (name = <={%split / $dir}) {
                if {~ $name ..} {
                    if {!~ $#current 0} {
                        let (x = 1 $current) current = $x(2 ... $#current)
                    }
                } {!~ $name . ''} {
                    current = $current $name
                }
            }
            let (path = / ^ <={ %flatten / $current }) {
                $cd $path
                cwd = $path
            }
        }
    }
}

# go back -N directories in cd (cd -0 prints stack, cd - goes to previous)
#
let (cd = $fn-cd; cd-stack = ()) fn cd dir { 
    let (old = `pwd) {
        if {~ $dir -*} {
            let (index = <={~~ $dir -*}) {
                if {~ $index ''} {
                    index = 1
                }
                if {~ $index [1-9]} {
                    dir = $cd-stack($index)
                } {~ $index 0} {
                    for (i = `{seq $#cd-stack}) {
                        echo $i - $cd-stack($i)
                    }
                    return 0
                } {
                    throw error cd 'cd: invalid argument'
                }
            }
        }
        $cd $dir
        cd-stack = ($old $cd-stack(1 ... 8))
    }
}


fn cutdir dir {
    local (discard = (); small_dir = <={~~ $dir /*}) {
        while {test 50 -lt <={strlen $small_dir}} {
            (discard small_dir) = <={~~ $small_dir */*}
        }

        if {~ $discard ()} {
            return $dir
        } {
            return .../$small_dir
        }
    }
}

# make cd calculate current directory in pretty form
let (cd = $fn-cd) fn cd {
    $cd $*
    promptwd = `pwd
    promptwd = $^promptwd
    if {~ $promptwd $home^*} {
        promptwd = '/~'^<={~~ $promptwd $home^*}
    }

    promptwd = <={cutdir $promptwd}

    if {~ $promptwd '/~'*} {
        promptwd = <={~~ $promptwd /*}
    }
}

fn %interactive-loop {
    let (result = <=true; parse_elapsed = 0) {
        catch @ e type msg {
            if {~ $e eof} {
                return $result
            } {~ $e exit} {
                throw $e $type $msg
            } {~ $e error} {
                echo >[1=2] $msg
                $fn-%dispatch false
            } {~ $e signal} {
                if {!~ $type sigint sigterm sigquit} {
                    echo >[1=2] caught unexpected signal: $type
                }
            } {
                echo >[1=2] uncaught exception: $e $type $msg
            }
            throw retry # restart forever loop
        } {
            forever {
                let (old-bqstatus = $bqstatus) {
                    if {!~ $#fn-%prompt 0} {
                        local (_parse_elapsed = $parse_elapsed; _result = $result) {
                            %prompt
                        }
                    }
                    let (code = <={%parse $prompt}) {
                        if {!~ $#code 0} {
                            let (start_time = `{date +%s}) {
                                bqstatus = $old-bqstatus
                                result = <={$fn-%dispatch $code}
                                parse_elapsed = `{expr `{date +%s} - $start_time}
                            }
                        }
                    }
                }
            }
        }
    }
}

# colourful programs with arguments
for (prog = grep) {
    let (o = `{which $prog}) fn $prog {$o --color\=auto $*}
}

# BSD ls uses CLICOLOR
if {~ $CLICOLOR ()} {
    let (o = `{which ls}) fn ls {$o --color\=auto $*}
}

# Useful utils
fn lc {
  fn searchcommandhistory {
    grep -av '^lc ' ~/.es_history | grep -a $1
  }

  if {~ $#* 1 || ~ $#* 0} {
    searchcommandhistory $1 | nl | tail -20
  } {
    eval `{searchcommandhistory $1 | sed -n $2^p}
  }
}

fn fv {
  if {~ $#* 1 || ~ $#* 0} {
    vi `{find . -name $1^* | head -1}
  } {
    vi `{find . -name '*'^$1^'*' | sed -n $2^p}
  }
}

fn f {
  if {~ $#* 1 || ~ $#* 0} {
    find . -name '*'^$1^'*' | nl
  } {
    find . -name '*'^$1^'*' | sed -n $2^p
  }
}

fn jh {
  jp --color always '@' $*
}

fn xh {
  xmllint --format - | source-highlight -s xml -f esc
}

# what to do for an interactive session
fn %prompt {
    stty -ixon # disable XOFF/XON (stop stupid C-s, esp. since readline uses it)
    history = $home/.es_history
    # eval `{gnome-keyring-daemon --start}
    cd .

    fn %prompt {
        if {~ $TERM xterm* rxvt*} {
            echo -n \033]0\;$promptwd\007
        }

        # TODO God this is ugly. Separate prompt calculation...
        let (e = \033; a=\1; z=\2; branch=`{git rev-parse --abbrev-ref HEAD >[2] /dev/null}; aws-role=$AWS_ROLE_NAME; venv=$VIRTUAL_ENV) {
            if {!~ $branch ()} {
                branch = ' ['^$branch^']'
            }
            if {!~ $aws-role ()} {
                aws-role = ' | '^$aws-role' ('`{expr '(' `{date +%s} - $AWS_SAML_TIME ')' / 60}'mins)'
            }
            if {!~ $VIRTUAL_ENV ()} {
                venv = ' | '^`{basename $venv}
            }
            prompt = $a'^='$_result' ('$_parse_elapsed') '$e[4\;35m$host$e^'[0m:'^$e^'[1;34m'^$promptwd$e^'[0m'^$^branch$^aws-role$^venv$z^\n^'; '
        }
    }

    %prompt
}
