# this file basically makes 'es' look more like a modern bash prompt
# (in terms of following symlinks, colours, cd - (+ enhancements))

history = ~/.es_history
host = `hostname
path = ( $path ~/bin )
#noexport = $noexport prompt
GNOME_KEYRING_CONTROL=

# symlink cd (and pwd)

fn pwd {
    if {~ $#cwd 0} {
        noexport = $noexport cwd
        cwd = `` \n /bin/pwd
    }
    echo $cwd
}
let (cd = $fn-cd) fn cd dir {
    if {~ $#cwd 0} {
        noexport = $noexport cwd
    }
    if {~ $#dir 0} {
        $cd
        cwd = ~
    } {
        let (current = <={
            if {~ $dir /*} {
                result
            } {
                if {~ $#cwd 0} {
                    cwd = `` \n /bin/pwd
                }
                %split / $cwd
            }
        }) {
            for (name = <={%split / $dir}) {
                if {~ $name ..} {
                    if {!~ $#current 0} {
                        let (x = 1 $current) current = $x(2 ... $#current)
                    }
                } {!~ $name . ''} {
                    current = $current $name
                }
            }
            let (path = / ^ <={ %flatten / $current }) {
                $cd $path
                cwd = $path
            }
        }
    }
}

# go back -N directories in cd (cd -0 prints stack, cd - goes to previous)
#
let (cd = $fn-cd; cd-stack = ()) fn cd dir { 
    let (old = `pwd) {
        if {~ $dir -*} {
            let (index = <={~~ $dir -*}) {
                if {~ $index ''} {
                    index = 1
                }
                if {~ $index [1-9]} {
                    dir = $cd-stack($index)
                } {~ $index 0} {
                    for (i = `{seq $#cd-stack}) {
                        echo $i - $cd-stack($i)
                    }
                    return 0
                } {
                    throw error cd 'cd: invalid argument'
                }
            }
        }
        $cd $dir
        cd-stack = ($old $cd-stack(1 ... 9))
    }
}


fn cutdir dir {
    local (discard = (); small_dir = <={~~ $dir /*}) {
        while {test -l $small_dir -gt 30} {
            (discard small_dir) = <={~~ $small_dir */*}
        }

        if {~ $discard ()} {
            return $dir
        } {
            return .../$small_dir
        }
    }
}

# colourful and informative prompt
let (cd = $fn-cd; c = \1\033; z=\2) fn cd {
    $cd $*
    pwd = `pwd
    pwd = $^pwd
    if {~ $pwd $home^*} {
        pwd = '/~'^<={~~ $pwd $home^*}
    }

    pwd = <={cutdir $pwd}

    if {~ $pwd '/~'*} {
        pwd = <={~~ $pwd /*}
    }

    let (branch=`{git rev-parse --abbrev-ref HEAD >[2] /dev/null}) {
        if {! ~ $branch ()} {
            branch = ' ['$branch']'
        } {
            branch = ''
        }
        prompt = $c[4\;35m$z$host^$c[0m$z:$c[1\;34m$z$pwd$c[0m$z$branch'; '
    }
}

# window title
let (parse = $fn-%parse) fn %parse prompt1 prompt2 {
    if {~ $TERM xterm* rxvt*} {
        echo -n \033]0\;$pwd' ('$USER'@'$host')'\007
    }
    cmd = <={$parse $prompt1 $prompt2}
    if {~ $TERM xterm* rxvt*} {
        echo -n \033]0\;$^cmd' ('$USER'@'$host')'\007
    }
    return $cmd
}

# colourful programs with arguments
for (prog = ls grep) {
    let (o = `{whatis $prog}) fn $prog {$o --color\=auto $*}
}

# colourful programs with wrappers
for (prog = diff make gcc) {
    fn $prog { color$prog $* }
}

for (othergcc = g++ c++ cc) {
    fn $othergcc { colorgcc $* }
}

# what to do for an interactive session
fn %prompt {
    stty -ixon # disable XOFF/XON (stop stupid C-s, esp. since readline uses it)
    cd . # in order to set our colourful prompt and the header
    fn %prompt # now lose the prompt function
}
